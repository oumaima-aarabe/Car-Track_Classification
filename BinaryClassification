{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":1495782,"sourceType":"datasetVersion","datasetId":878523},{"sourceId":9732126,"sourceType":"datasetVersion","datasetId":5955810},{"sourceId":9732141,"sourceType":"datasetVersion","datasetId":5955821}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/oumaimaaarabe/car-track?scriptVersionId=203707621\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"## load data","metadata":{"execution":{"iopub.status.busy":"2024-10-25T14:25:19.352961Z","iopub.execute_input":"2024-10-25T14:25:19.353415Z","iopub.status.idle":"2024-10-25T14:25:19.358845Z","shell.execute_reply.started":"2024-10-25T14:25:19.353372Z","shell.execute_reply":"2024-10-25T14:25:19.357428Z"}}},{"cell_type":"code","source":"# Imports\nimport os, warnings\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\n\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\n\nwarnings.filterwarnings(\"ignore\")\n\ndef warn(*args, **kwargs):\n    pass\nwarnings.warn = warn\n# Reproducability\nVALIDATION_SPLIT = 0.5  # Split test data 50-50 between validation and test\nSEED = 123  # For reproducibility\nBATCH_SIZE = 64\nIMAGE_SIZE = [128, 128]\n\n# Load training data (no split needed)\nds_train = image_dataset_from_directory(\n    '../input/car-or-truck/train',\n    labels='inferred',\n    label_mode='binary',\n    image_size=IMAGE_SIZE,\n    interpolation='nearest',\n    batch_size=BATCH_SIZE,\n    shuffle=True,\n)\n\n# Split the test directory into validation and test sets\nds_val = image_dataset_from_directory(\n    '../input/car-or-truck/valid',\n    labels='inferred',\n    label_mode='binary',\n    image_size=IMAGE_SIZE,\n    interpolation='nearest',\n    batch_size=BATCH_SIZE,\n    validation_split=VALIDATION_SPLIT,\n    subset='training',  # This will be our validation set\n    seed=SEED,\n    shuffle=True,\n)\n\nds_test = image_dataset_from_directory(\n    '../input/car-or-truck/valid',  \n    labels='inferred',\n    label_mode='binary',\n    image_size=IMAGE_SIZE,\n    interpolation='nearest',\n    batch_size=BATCH_SIZE,\n    validation_split=VALIDATION_SPLIT,\n    subset='validation',  # This will be our test set\n    seed=SEED,\n    shuffle=True,\n)\n# Data Pipeline\ndef convert_to_float(image, label):\n    image = tf.image.convert_image_dtype(image, dtype=tf.float32)\n    return image, label\n\nAUTOTUNE = tf.data.experimental.AUTOTUNE\nds_train = (\n    ds_train\n    .map(convert_to_float)\n    .cache()\n    .prefetch(buffer_size=AUTOTUNE)\n)\nds_valid = (\n    ds_val\n    .map(convert_to_float)\n    .cache()\n    .prefetch(buffer_size=AUTOTUNE)\n)\n\nds_test = (\n    ds_test\n    .map(convert_to_float)\n    .cache()\n    .prefetch(buffer_size=AUTOTUNE)\n)","metadata":{"execution":{"iopub.status.busy":"2024-10-27T12:06:05.595797Z","iopub.execute_input":"2024-10-27T12:06:05.596201Z","iopub.status.idle":"2024-10-27T12:06:13.013365Z","shell.execute_reply.started":"2024-10-27T12:06:05.596163Z","shell.execute_reply":"2024-10-27T12:06:13.012423Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Found 5117 files belonging to 2 classes.\nFound 5051 files belonging to 2 classes.\nUsing 2526 files for training.\nFound 5051 files belonging to 2 classes.\nUsing 2525 files for validation.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Define && Train Model","metadata":{}},{"cell_type":"code","source":"from tensorflow import keras\nfrom tensorflow.keras import layers\n\n\n\n# # detect and init the TPU\n# tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n\n# # instantiate a distribution strategy\n# tf.tpu.experimental.initialize_tpu_system(tpu)\n# tpu_strategy = tf.distribute.TPUStrategy(tpu)\n\n# # instantiating the model in the strategy scope creates the model on the TPU\n# with tpu_strategy.scope():\n\n\n\ndef create_model():\n    model = keras.Sequential([\n\n        # First Convolutional Block\n        layers.Conv2D(filters=32, kernel_size=5, activation=\"relu\", padding='same',\n                      # [height, width, color channels(RGB)]\n                      input_shape=[128, 128, 3]),\n        layers.AveragePooling2D(2),\n\n        # Second Convolutional Block\n        layers.Conv2D(filters=64, kernel_size=3, activation=\"relu\", padding='same'),\n        layers.AveragePooling2D(2),\n\n        # Third Convolutional Block\n        layers.Conv2D(filters=128, kernel_size=3, activation=\"relu\", padding='same'),\n        layers.Conv2D(filters=128, kernel_size=3, activation=\"relu\", padding='same'),\n        layers.AveragePooling2D(2),\n\n        # Classifier Head\n        layers.Flatten(),\n        layers.Dense(units=6, activation=\"relu\"),\n        layers.Dropout(0.2),\n        layers.Dense(units=1, activation=\"sigmoid\"),\n    ])\n    \n    model.compile(\n            optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n            loss='binary_crossentropy',\n            metrics=[keras.metrics.BinaryAccuracy()],\n    )\n    return model\n\n\nearly_stopping = keras.callbacks.EarlyStopping(\n    min_delta=0.001,\n    patience=12,\n    restore_best_weights=True,\n    verbose=1)\n\nReduceLROnPlateau = keras.callbacks.ReduceLROnPlateau(\n    monitor=\"val_loss\",\n    factor=0.1,\n    patience=6,\n    verbose=1,\n    mode=\"min\",\n)\n\n\nModelCheckpoint = tf.keras.callbacks.ModelCheckpoint(\n    \"truckOrCar.keras\",\n    monitor='val_loss',\n    verbose=1,\n    save_best_only=True,\n    mode='min',\n)\nmodel = create_model()\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-10-27T12:06:13.015135Z","iopub.execute_input":"2024-10-27T12:06:13.015429Z","iopub.status.idle":"2024-10-27T12:06:13.101756Z","shell.execute_reply.started":"2024-10-27T12:06:13.015397Z","shell.execute_reply":"2024-10-27T12:06:13.100937Z"},"trusted":true},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_1\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d_4 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m, \u001b[38;5;34m128\u001b[0m, \u001b[38;5;34m32\u001b[0m)   │         \u001b[38;5;34m2,432\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ average_pooling2d_3             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n│ (\u001b[38;5;33mAveragePooling2D\u001b[0m)              │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_5 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m18,496\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ average_pooling2d_4             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n│ (\u001b[38;5;33mAveragePooling2D\u001b[0m)              │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_6 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │        \u001b[38;5;34m73,856\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_7 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │       \u001b[38;5;34m147,584\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ average_pooling2d_5             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n│ (\u001b[38;5;33mAveragePooling2D\u001b[0m)              │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_1 (\u001b[38;5;33mFlatten\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32768\u001b[0m)          │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m6\u001b[0m)              │       \u001b[38;5;34m196,614\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m6\u001b[0m)              │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m7\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)   │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,432</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ average_pooling2d_3             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">AveragePooling2D</span>)              │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ average_pooling2d_4             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">AveragePooling2D</span>)              │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">147,584</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ average_pooling2d_5             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">AveragePooling2D</span>)              │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32768</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>)              │       <span style=\"color: #00af00; text-decoration-color: #00af00\">196,614</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m438,989\u001b[0m (1.67 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">438,989</span> (1.67 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m438,989\u001b[0m (1.67 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">438,989</span> (1.67 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"# tf.config.optimizer.set_jit(False)\nhistory = model.fit(\n    ds_train,\n    validation_data=ds_valid,\n    epochs=50,\n    verbose=1,\n    callbacks=[early_stopping, ReduceLROnPlateau, ModelCheckpoint]\n)","metadata":{"execution":{"iopub.status.busy":"2024-10-27T12:06:13.102952Z","iopub.execute_input":"2024-10-27T12:06:13.103574Z","iopub.status.idle":"2024-10-27T12:07:53.876421Z","shell.execute_reply.started":"2024-10-27T12:06:13.10353Z","shell.execute_reply":"2024-10-27T12:07:53.87548Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Epoch 1/50\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 61ms/step - binary_accuracy: 0.5583 - loss: 0.6783\nEpoch 1: val_loss improved from inf to 0.62779, saving model to truckOrCar.keras\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 84ms/step - binary_accuracy: 0.5585 - loss: 0.6781 - val_binary_accuracy: 0.5804 - val_loss: 0.6278 - learning_rate: 0.0010\nEpoch 2/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.5971 - loss: 0.6477\nEpoch 2: val_loss improved from 0.62779 to 0.61086, saving model to truckOrCar.keras\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - binary_accuracy: 0.5976 - loss: 0.6475 - val_binary_accuracy: 0.6492 - val_loss: 0.6109 - learning_rate: 0.0010\nEpoch 3/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.6526 - loss: 0.6111\nEpoch 3: val_loss improved from 0.61086 to 0.55992, saving model to truckOrCar.keras\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 41ms/step - binary_accuracy: 0.6528 - loss: 0.6107 - val_binary_accuracy: 0.7189 - val_loss: 0.5599 - learning_rate: 0.0010\nEpoch 4/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.6560 - loss: 0.5919\nEpoch 4: val_loss improved from 0.55992 to 0.52634, saving model to truckOrCar.keras\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 41ms/step - binary_accuracy: 0.6559 - loss: 0.5919 - val_binary_accuracy: 0.7328 - val_loss: 0.5263 - learning_rate: 0.0010\nEpoch 5/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.6752 - loss: 0.5692\nEpoch 5: val_loss did not improve from 0.52634\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - binary_accuracy: 0.6751 - loss: 0.5691 - val_binary_accuracy: 0.7217 - val_loss: 0.5339 - learning_rate: 0.0010\nEpoch 6/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 35ms/step - binary_accuracy: 0.7022 - loss: 0.5334\nEpoch 6: val_loss improved from 0.52634 to 0.49359, saving model to truckOrCar.keras\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 41ms/step - binary_accuracy: 0.7024 - loss: 0.5331 - val_binary_accuracy: 0.7593 - val_loss: 0.4936 - learning_rate: 0.0010\nEpoch 7/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.7489 - loss: 0.4966\nEpoch 7: val_loss did not improve from 0.49359\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - binary_accuracy: 0.7493 - loss: 0.4964 - val_binary_accuracy: 0.7601 - val_loss: 0.4971 - learning_rate: 0.0010\nEpoch 8/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 35ms/step - binary_accuracy: 0.7757 - loss: 0.4663\nEpoch 8: val_loss improved from 0.49359 to 0.43599, saving model to truckOrCar.keras\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 41ms/step - binary_accuracy: 0.7757 - loss: 0.4662 - val_binary_accuracy: 0.7977 - val_loss: 0.4360 - learning_rate: 0.0010\nEpoch 9/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 35ms/step - binary_accuracy: 0.8011 - loss: 0.4231\nEpoch 9: val_loss improved from 0.43599 to 0.41238, saving model to truckOrCar.keras\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 41ms/step - binary_accuracy: 0.8012 - loss: 0.4230 - val_binary_accuracy: 0.8238 - val_loss: 0.4124 - learning_rate: 0.0010\nEpoch 10/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.8133 - loss: 0.3874\nEpoch 10: val_loss did not improve from 0.41238\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 41ms/step - binary_accuracy: 0.8135 - loss: 0.3873 - val_binary_accuracy: 0.8021 - val_loss: 0.4258 - learning_rate: 0.0010\nEpoch 11/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.8116 - loss: 0.3827\nEpoch 11: val_loss improved from 0.41238 to 0.37434, saving model to truckOrCar.keras\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 41ms/step - binary_accuracy: 0.8120 - loss: 0.3822 - val_binary_accuracy: 0.8246 - val_loss: 0.3743 - learning_rate: 0.0010\nEpoch 12/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.8440 - loss: 0.3379\nEpoch 12: val_loss improved from 0.37434 to 0.35776, saving model to truckOrCar.keras\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 41ms/step - binary_accuracy: 0.8442 - loss: 0.3376 - val_binary_accuracy: 0.8440 - val_loss: 0.3578 - learning_rate: 0.0010\nEpoch 13/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.8480 - loss: 0.3161\nEpoch 13: val_loss improved from 0.35776 to 0.35365, saving model to truckOrCar.keras\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 42ms/step - binary_accuracy: 0.8480 - loss: 0.3159 - val_binary_accuracy: 0.8523 - val_loss: 0.3537 - learning_rate: 0.0010\nEpoch 14/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 35ms/step - binary_accuracy: 0.8593 - loss: 0.3011\nEpoch 14: val_loss improved from 0.35365 to 0.34479, saving model to truckOrCar.keras\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 42ms/step - binary_accuracy: 0.8595 - loss: 0.3010 - val_binary_accuracy: 0.8448 - val_loss: 0.3448 - learning_rate: 0.0010\nEpoch 15/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.8680 - loss: 0.2794\nEpoch 15: val_loss did not improve from 0.34479\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - binary_accuracy: 0.8681 - loss: 0.2794 - val_binary_accuracy: 0.8606 - val_loss: 0.3451 - learning_rate: 0.0010\nEpoch 16/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.8669 - loss: 0.2766\nEpoch 16: val_loss improved from 0.34479 to 0.34389, saving model to truckOrCar.keras\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - binary_accuracy: 0.8672 - loss: 0.2763 - val_binary_accuracy: 0.8523 - val_loss: 0.3439 - learning_rate: 0.0010\nEpoch 17/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 33ms/step - binary_accuracy: 0.8878 - loss: 0.2520\nEpoch 17: val_loss improved from 0.34389 to 0.32644, saving model to truckOrCar.keras\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - binary_accuracy: 0.8878 - loss: 0.2519 - val_binary_accuracy: 0.8654 - val_loss: 0.3264 - learning_rate: 0.0010\nEpoch 18/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 33ms/step - binary_accuracy: 0.8931 - loss: 0.2336\nEpoch 18: val_loss did not improve from 0.32644\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - binary_accuracy: 0.8933 - loss: 0.2334 - val_binary_accuracy: 0.8709 - val_loss: 0.3271 - learning_rate: 0.0010\nEpoch 19/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 33ms/step - binary_accuracy: 0.9181 - loss: 0.1949\nEpoch 19: val_loss did not improve from 0.32644\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - binary_accuracy: 0.9180 - loss: 0.1948 - val_binary_accuracy: 0.8646 - val_loss: 0.3481 - learning_rate: 0.0010\nEpoch 20/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 33ms/step - binary_accuracy: 0.9054 - loss: 0.2066\nEpoch 20: val_loss did not improve from 0.32644\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - binary_accuracy: 0.9056 - loss: 0.2066 - val_binary_accuracy: 0.8555 - val_loss: 0.3459 - learning_rate: 0.0010\nEpoch 21/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 33ms/step - binary_accuracy: 0.9156 - loss: 0.1900\nEpoch 21: val_loss did not improve from 0.32644\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 39ms/step - binary_accuracy: 0.9156 - loss: 0.1899 - val_binary_accuracy: 0.8709 - val_loss: 0.3513 - learning_rate: 0.0010\nEpoch 22/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 33ms/step - binary_accuracy: 0.9173 - loss: 0.1864\nEpoch 22: val_loss did not improve from 0.32644\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - binary_accuracy: 0.9173 - loss: 0.1864 - val_binary_accuracy: 0.8587 - val_loss: 0.4240 - learning_rate: 0.0010\nEpoch 23/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 33ms/step - binary_accuracy: 0.8863 - loss: 0.2271\nEpoch 23: ReduceLROnPlateau reducing learning rate to 0.00010000000474974513.\n\nEpoch 23: val_loss did not improve from 0.32644\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - binary_accuracy: 0.8867 - loss: 0.2266 - val_binary_accuracy: 0.8662 - val_loss: 0.3470 - learning_rate: 0.0010\nEpoch 24/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.9324 - loss: 0.1678\nEpoch 24: val_loss did not improve from 0.32644\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - binary_accuracy: 0.9326 - loss: 0.1673 - val_binary_accuracy: 0.8785 - val_loss: 0.3485 - learning_rate: 1.0000e-04\nEpoch 25/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.9338 - loss: 0.1450\nEpoch 25: val_loss did not improve from 0.32644\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - binary_accuracy: 0.9339 - loss: 0.1447 - val_binary_accuracy: 0.8808 - val_loss: 0.3528 - learning_rate: 1.0000e-04\nEpoch 26/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.9370 - loss: 0.1406\nEpoch 26: val_loss did not improve from 0.32644\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - binary_accuracy: 0.9371 - loss: 0.1403 - val_binary_accuracy: 0.8804 - val_loss: 0.3550 - learning_rate: 1.0000e-04\nEpoch 27/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.9427 - loss: 0.1339\nEpoch 27: val_loss did not improve from 0.32644\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - binary_accuracy: 0.9430 - loss: 0.1336 - val_binary_accuracy: 0.8793 - val_loss: 0.3748 - learning_rate: 1.0000e-04\nEpoch 28/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.9397 - loss: 0.1344\nEpoch 28: val_loss did not improve from 0.32644\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - binary_accuracy: 0.9399 - loss: 0.1341 - val_binary_accuracy: 0.8800 - val_loss: 0.3708 - learning_rate: 1.0000e-04\nEpoch 29/50\n\u001b[1m79/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - binary_accuracy: 0.9443 - loss: 0.1297\nEpoch 29: ReduceLROnPlateau reducing learning rate to 1.0000000474974514e-05.\n\nEpoch 29: val_loss did not improve from 0.32644\n\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 40ms/step - binary_accuracy: 0.9443 - loss: 0.1295 - val_binary_accuracy: 0.8840 - val_loss: 0.3777 - learning_rate: 1.0000e-04\nEpoch 29: early stopping\nRestoring model weights from the end of the best epoch: 17.\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\n\nhistory_frame = pd.DataFrame(history.history)\nhistory_frame.loc[:, ['loss', 'val_loss']].plot()\nhistory_frame.loc[:, ['binary_accuracy', 'val_binary_accuracy']].plot();","metadata":{"execution":{"iopub.status.busy":"2024-10-27T12:07:53.878371Z","iopub.execute_input":"2024-10-27T12:07:53.878682Z","iopub.status.idle":"2024-10-27T12:07:54.349224Z","shell.execute_reply.started":"2024-10-27T12:07:53.878649Z","shell.execute_reply":"2024-10-27T12:07:54.348363Z"},"trusted":true},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import tensorflow as tf\n\nimg_path_c = '/kaggle/input/test-image/WHITE_cc_2022HOC020101_01_1280_BL.jpeg'\nimg_path = '/kaggle/input/truck-test/download_image.jpeg'\n\nimg = tf.keras.preprocessing.image.load_img(img_path_c, target_size=(128, 128))\n\nimg_array = tf.keras.preprocessing.image.img_to_array(img)\n\nimg_array = img_array / 255.0  # Normalize pixel values to [0, 1]\n\n# represent the batch size\nimg_array = tf.expand_dims(img_array, 0)\n\npredictions = model.predict(img_array)\nprint(predictions)","metadata":{"execution":{"iopub.status.busy":"2024-10-27T12:07:54.350426Z","iopub.execute_input":"2024-10-27T12:07:54.350731Z","iopub.status.idle":"2024-10-27T12:07:54.635151Z","shell.execute_reply.started":"2024-10-27T12:07:54.350698Z","shell.execute_reply":"2024-10-27T12:07:54.634177Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 225ms/step\n[[0.0074482]]\n","output_type":"stream"}]},{"cell_type":"code","source":"# model.save('car_or_truck_model')\nloss, acc = model.evaluate(ds_test, verbose=2)\nprint(\"Untrained model, accuracy: {:5.2f}%\".format(100 * acc))","metadata":{"execution":{"iopub.status.busy":"2024-10-27T12:07:54.636342Z","iopub.execute_input":"2024-10-27T12:07:54.636631Z","iopub.status.idle":"2024-10-27T12:07:56.3115Z","shell.execute_reply.started":"2024-10-27T12:07:54.6366Z","shell.execute_reply":"2024-10-27T12:07:56.310589Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"40/40 - 2s - 42ms/step - binary_accuracy: 0.8816 - loss: 0.3093\nUntrained model, accuracy: 88.16%\n","output_type":"stream"}]}]}